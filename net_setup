#!/bin/bash
source ~/openrc

function die ( ) {
  echo $@
  exit 1
}

function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

# Find the Public and private networks:
# The public ip information is specific to POD5 of Openstack lab in building SJ13
# Please see http://wikicentral.cisco.com/display/OPENSTACK/DC1+Layer+3+Address+Management
# for more information
[ -e .network ] && source .network >& /dev/null
[ -z ${PUB_IP} ] && PUB_IP="172.29.74.192"
[ -z ${PUB_CIDR} ] && PUB_CIDR='27'
[ -z ${PUB_START}] && PUB_START="172.29.74.196"
[ -z ${PUB_END}] && PUB_END="172.29.74.222"
[ -z ${PRIV_IP} ] && PRIV_IP="192.168.1.0"
[ -z ${PRIV_CIDR} ] && PRIV_CIDR='24'
[ -z ${DNS} ] && DNS='172.29.74.154'

echo -e "Current net info:\nPublic: ${PUB_IP}/${PUB_CIDR}\nPrivate: ${PRIV_IP}/${PRIV_CIDR}\nDNS: ${DNS}\n\n"
read -p "Would you like to change this? (y|n) [n]: " CHANGE
if [ -z ${CHANGE} ] ; then 
  CHANGE="n"
fi
if [ "${CHANGE}" != 'n' ]; then
read -p "What is your public network IP [${PUB_IP}]: " IP_IN
[ -z ${IP_IN} ] ||PUB_IP=${IP_IN}
if  ! valid_ip ${PUB_IP} ; then
 die "Please enter a valid public n/w ip address"
fi

read -p "What is the CIDR for that network[${PUB_CIDR}]: " PUB_CIDR
[ -z ${PUB_CIDR} ] && PUB_CIDR='24'

read -p "Please enter the start address of the public (floating) ip pool[${PUB_START}]: " PUB_START
[ -z ${PUB_START} ] || PUB_START=${PUB_START}
if  ! valid_ip ${PUB_START} ; then
 die "Please enter a valid public n/w start ip address"
fi

read -p "Please enter the end address of the public (floating) ip pool[${PUB_END}]: " PUB_END
[ -z ${PUB_END} ] || PUB_END=${PUB_END}
if  ! valid_ip ${PUB_END} ; then
 die "Please enter a valid public n/w end ip address"
fi


echo "export PUB_IP=${PUB_IP}" > .network
echo "export PUB_CIDR=${PUB_CIDR}" >> .network
echo "export PUB_START=${PUB_START}" >> .network
echo "export PUB_END=${PUB_END}" >> .network

read -p "What is your private network IP [${PRIV_IP}]: " IP_IN
[ -z ${IP_IN} ] || PRIV_IP=${IP_IN}
if  ! valid_ip ${PRIV_IP} ; then
 die "Please enter a valid private ip"
fi
read -p "What is the CIDR for that network[${PRIV_CIDR}]: " PRIV_CIDR
[ -z ${PRIV_CIDR} ] && PRIV_CIDR='24'

echo "export PRIV_IP=${PRIV_IP}" >> .network
echo "export PRIV_CIDR=${PRIV_CIDR}" >> .network

[ -z ${DNS} ] && DNS=`grep nameserver /etc/resolv.conf | head -1 | awk -F' ' '{print $2}'`
read -p "What is the DNS for your public network[${DNS}]: " DNS
[ -z ${DNS} ] && DNS=`grep nameserver /etc/resolv.conf | head -1 | awk -F' ' '{print $2}'`
echo "export DNS=${DNS}" >> .network
fi
if ! valid_ip ${PUB_IP} ; then
 die "Please enter a valid public ip address"
fi
PUB_NET="${PUB_IP}/${PUB_CIDR}"
PRIV_NET="${PRIV_IP}/${PRIV_CIDR}"
echo -e  "\n\nPublic Private Subnets: ${PUB_NET} ${PRIV_NET}, DNS: ${DNS}"
# Create a the public network, the l3 agent connection, and associate an IP
# subnet to it
PUB_NET_ID=`quantum net-list | grep public`
[ -z "${PUB_NET_ID}" ] || die 'Delete your networks and try again'
if ! PUB_NET_ID=`quantum net-create public --router:external=True | grep ' id ' | awk -F' ' '{print $4}'`; then
 echo 'no public net created'
 exit 1
fi

if ! PUB_SUBNET_ID=`quantum subnet-create --allocation-pool start=${PUB_START},end=${PUB_END}  public ${PUB_NET} | grep ' id ' | awk -F' ' '{print $4}'` ; then
 echo 'no public subnet created'
 exit 1
fi
echo "Public Net and Subnet ID: ${PUB_NET_ID} ${PUB_SUBNET_ID}"

# Create the private network, ans assicate an IP, L3 cnnection is next
PRIV_NET_ID=`quantum net-create private | grep ' id ' | awk -F' ' '{print $4}'`
PRIV_SUBNET_ID=`quantum subnet-create private ${PRIV_NET}  --dns_nameservers list=true ${DNS} | grep ' id ' | awk -F' ' '{print $4}'`
echo "Private Net and Subnet ID: ${PRIV_NET_ID} ${PRIV_SUBNET_ID}"
# Create a router, and connect it to the private network
PRIV_ROUTER=`quantum router-create private_router_1 | grep ' id ' | awk -F' ' '{print $4}'`
# now attach the router to the private network port
PRIV_ROUTER_INT=`quantum router-interface-add private_router_1 "${PRIV_SUBNET_ID}"| grep ' id ' | awk -F' ' '{print $4}'`
# Now connect the router to the external public newtork
PUB_PRIV_ROUTER=`quantum router-gateway-set private_router_1 "${PUB_NET_ID}" | grep ' id ' | awk -F' ' '{print $4}'`

PUB_NETWORK=`quantum port-list -- --device_id ${PRIV_ROUTER} --device_owner network:router_gateway | grep ip_address | awk -F'"' '{print $8}'`
PRIV_ROUTER=`quantum router-list | grep private_router_1 | awk -F' ' '{print $2}'`
echo "Private Router and Subnet ID: qrouter-${PRIV_ROUTER} ${PUB_NETWORK}"
route add -net ${PRIV_IP}/${PRIV_CIDR} gw ${PUB_NETWORK}
